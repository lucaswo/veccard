# This file contains the instructions we used to generate the plots illustrated in the paper.
# Note that this is not a script that be run. Instead, it only lists instructions that can be pasted to an R prompt.

R:
forest <- do.call(rbind, lapply(list.files(path="differentNumberQueries/forest100k/", pattern="*test*", full.names=TRUE), read.csv))
forestVar <- do.call(rbind, lapply(list.files(path="differentNumberQueries/", pattern="*test*", recursive=TRUE, full.names=TRUE), read.csv))
#when all data frames have same schema
forestAttr <- do.call(rbind, lapply(list.files(path="differentNumberAttributes/", pattern="*3att*", full.names=TRUE), read.csv))
# when NOT all data frames have same schema:
forestAttr <- do.call(rbind, lapply(list.files(path="differentNumberAttributes/", pattern="*3att*", full.names=TRUE), function(x){read.csv(x)[,c("SQL","cardinality","attrcount","y_pred","qerror","size","model","vectorization")]} ))
# training+test data
forestAttr <- do.call(rbind, lapply(list.files(path="differentNumberAttributes/", pattern="*csv", full.names=TRUE), function(x){read.csv(x)[,c("SQL","cardinality","attrcount","y_pred","qerror","size","model","vectorization")]} ))

ggplot(forest, aes(y=qerror)) + geom_boxplot() + scale_y_log10() + facet_grid(vectorization ~ model)


quants <- function(x) {
    r <- quantile(x, probs = c(0.01, 0.25, 0.5, 0.75, 0.99))
    names(r) <- c("ymin", "lower", "middle", "upper", "ymax")
    r
}
ggplot(subset(forest, cardinality > 10), aes(x="", y=qerror)) + facet_grid(algo~vectorization) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())

#> forest$vec <- sapply(strsplit(forest$file, "\\+"), "[[", 1)
#> forest$algo <- sapply(strsplit(forest$file, "\\+"), "[[", 2)
> forest$andcount <- str_count(forest$SQL, "AND")  # require(stringr)
#> forest$predcount <- forest$andcount + 1
> forest$predcount <- sapply(str_extract_all(forest$SQL, "a[0-9]{1,2}"), function(x){NROW(x)})
> forest$attrcount <- sapply(str_extract_all(forest$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})

> sort(unique(subset(forest, vectorization != "complex" & model == "GB")$andcount))
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 37 45
> hist(subset(forest, vectorization != "complex" & model == "GB")$andcount, breaks=46)
> hist(subset(forest, model=="GB" & vectorization != "complex")$attrcount)
> unique(subset(forest, model=="GB" & vectorization != "complex")$attrcount)
 [1]  2  1  3  5  4  6  7  8 10  9

# plot per predicates (predcount).
# old
ggplot(subset(forest, vectorization != "complex" & model == "GB" & predcount %in% c(2,3,5,7,10,20)), aes(x=vectorization, y=qerror)) + facet_grid(predcount~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())
# new
ggplot(subset(forest, model == "GB" & predcount %in% c(2,3,5,7,10,20)), aes(x=vectorization, y=qerror)) + facet_grid(predcount~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())

> ggplot(subset(forest, vectorization != "complex" & model == "GB"), aes(x=cardinality)) + geom_histogram()

# plot per attributecount:
# all attrcounts, but very few with 10
ggplot(subset(forest, vectorization != "complex" & model == "GB" & attrcount %in% c(1,2,3,4,5,6,7,8,9,10)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())
# selected attrcounts
ggplot(subset(forest, vectorization != "complex" & model == "GB" & attrcount %in% c(1,3,5,8)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())
# selected attrcounts with complex
ggplot(subset(forest, model == "GB" & attrcount %in% c(1,3,5,8)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())

# plot attributecount ~ predcount (no interesting findings)
> ggplot(subset(forest, vectorization != "complex" & model == "GB" & attrcount %in% c(1,3,5,8) & predcount %in% c(0,1,3,5,7,10,20) & attrcount < predcount), aes(x=vectorization, y=qerror)) + facet_wrap(attrcount~predcount) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.title.x = element_blank())


# boxplot to illustrate learning rate:
# no outliers
#forestVar$sizeasstr <- as.character(forestVar$size)
forestVar$sizeasfac <- as.factor(forestVar$size)
ggplot(forestVar, aes(x=sizeasfac, y=qerror)) + facet_grid(vectorization~model) + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10()
# outliers
ggplot(forestVar, aes(x=sizeasfac, y=qerror)) + facet_grid(vectorization~model) + geom_boxplot() + scale_y_log10()
# get summary
#for (i in c(10000,20000,30000,40000,50000)){print(summary(subset(forestVar, model=="NN" & vectorization=="simple" & size==i)$qerror))}
for (i in sort(unique(forestVar$size))){print(summary(subset(forestVar, model=="NN" & vectorization=="simple" & size==i)$qerror))}



# split queries by number of distinct attributes in query and number of connectors
# working directory: veccard/data/resultsLucasForestLarge/differentNumberQueries/forest100k
# conjunctive
temp <- do.call(rbind, lapply(c("forest__conjunctive_train100+GB.csv", "forest__conjunctive_test100+GB.csv"), read.csv))
temp <- temp[,c("SQL", "cardinality")]
require(stringr)
temp$andcount <- str_count(temp$SQL, "AND")
temp$attrcount <- sapply(str_extract_all(temp$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})
temp$predcount <- sapply(str_extract_all(temp$SQL, "a[0-9]{1,2}"), function(x){NROW(x)})

> hist(temp$attrcount)
> NROW(subset(temp, attrcount > 5))
[1] 1086
> NROW(subset(temp, attrcount > 4))
[1] 3410
> NROW(subset(temp, attrcount > 3))
[1] 10091
> NROW(subset(temp, attrcount > 2))
[1] 28758

write.csv(subset(temp, attrcount <= 2), file="queries__conjunctive_max_two_attributes.csv", quote=FALSE, row.names=FALSE)
write.csv(subset(temp, attrcount > 2), file="queries__conjunctive_min_three_attributes.csv", quote=FALSE, row.names=FALSE)

#complex
temp <- do.call(rbind, lapply(c("forest__complex_train100+GB.csv", "forest__complex_test100+GB.csv"), read.csv))
temp <- temp[,c("SQL", "cardinality")]
temp$attrcount <- sapply(str_extract_all(temp$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})
> NROW(subset(temp, attrcount > 2))
[1] 40930
write.csv(subset(temp, attrcount <= 2), file="queries__complex_max_two_attributes.csv", quote=FALSE, row.names=FALSE)
write.csv(subset(temp, attrcount > 2), file="queries__complex_min_three_attributes.csv", quote=FALSE, row.names=FALSE)

#postgres
temp1GB <- read.csv("postgresEst/queries__forest_conjunctive.csv")
temp1GB$model = "GB"
temp1GB[,c("size","vectorization")] = "postgresCon"
temp1NN <- temp1GB
temp1NN$model <- "NN"
temp2GB <- read.csv("postgresEst/queries__forest_complex.csv")
temp2GB[,c("size","vectorization")] = "postgresDis"
temp2GB$model = "GB"
temp2NN <- temp2GB
temp2NN$model <- "NN"
tempPost <- do.call(rbind, list(temp1GB, temp1NN, temp2GB, temp2NN))
tempPost$attrcount <- sapply(str_extract_all(tempPost$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})
# For instance:
forestAttrPost <- rbind(forestAttr, tempPost)
# Or:
forestPost <- rbind(forest, tempPost)
bestToPost <- subset(forestPost, model=="GB" & vectorization %in% c("complex","conjunctive","postgresCon","postgresDis"))
bestToPost$query_has_brace <- str_count(bestToPost$SQL, "\\(")
bestToPost$is_complex_query <- (bestToPost$query_has_brace > 1)
bestToPost$query_type <- "dummy"
bestToPost[bestToPost$is_complex_query == TRUE,]$query_type <- "Complex Queries"
bestToPost[bestToPost$is_complex_query == FALSE,]$query_type <- "Conjunctive Queries"
# next to lines for nicer labels
bestToPost[bestToPost$vectorization == "postgresCon",]$vectorization <- "postgres"
bestToPost[bestToPost$vectorization == "postgresDis",]$vectorization <- "postgres"
ggplot(subset(bestToPost, attrcount %in% c(1,2,3,5,7,10)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~query_type, scales="free") + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.text.x = element_text(angle = 45, hjust=1))
#include sampling
#smplCon <- read.csv("samplingEst/promille_sampling__queries__forest_conjunctive_large.csv")
smplCon <- read.csv("samplingEst/limit1000_sampling__queries__forest_conjunctive_large.csv")
smplCon$query_type <- "Conjunctive Queries"
#smplCom <- read.csv("samplingEst/promille_sampling__queries__forest_complex_large.csv")
smplCom <- read.csv("samplingEst/limit1000_sampling__queries__forest_complex_large.csv")
smplCom$query_type <- "Complex Queries"
smpl <- rbind(smplCon, smplCom)
smpl$attrcount <- sapply(str_extract_all(smpl$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})
smpl$model <- "sampling"
smpl$vectorization <- "sampling"
#forestPostSmpl <- rbind(forestPost, smpl) # sampl has no "query_has_brace" attribute
bestPostSmpl <-rbind(bestToPost[,c("SQL","cardinality","y_pred","qerror","model","vectorization","attrcount","query_type")], smpl)
ggplot(subset(bestPostSmpl, attrcount %in% c(1,2,3,5,7,10)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~query_type, scales="free") + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.text.x = element_text(angle = 45, hjust=1))
#include mscn
mscn <- read.csv("mscnEst/results_MSCN_1k.csv")
mscn$query_type <- "Conjunctive Queries"
mscn$attrcount <- sapply(str_extract_all(mscn$SQL, "a[0-9]{1,2}"), function(x){NROW(unique(x))})
mscn <- mscn[,c("SQL", "cardinality", "y_pred", "qerror", "model", "vectorization", "attrcount", "query_type")]
bestPostSmplMscn <- rbind(bestPostSmpl, mscn)
ggplot(subset(bestPostSmplMscn, attrcount %in% c(1,2,3,5,7)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~query_type, scales="free") + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.text.x = element_text(angle = 45, hjust=1))
#ggplot(subset(bestPostSmplMscn, attrcount %in% c(1,2,3,5,7,10)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~query_type, scales="free") + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.text.x = element_text(angle = 45, hjust=1))
# Change query_type "Complex Queries" to "Mixed Queries"
temp <- bestPostSmplMscn
temp[temp$query_type == "Complex Queries",]$query_type <- "Mixed Queries"
ggplot(subset(temp, attrcount %in% c(1,2,3,5,7)), aes(x=vectorization, y=qerror)) + facet_grid(attrcount~query_type, scales="free") + stat_summary(fun.data=quants, geom="boxplot") + scale_y_log10() + theme(axis.text.x = element_text(angle = 45, hjust=1))


# old: 
# Bash:
# in folder "withfilenames"
# ls * | xargs -I% sed -i '2,s/$/,"%"/' %
# "2" means, start at line 2

then: introduce "file" column name for all files
